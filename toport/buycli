#!/usr/bin/env python

# the following part of the program is the non-GUI version
# it implements much the same functionality with less usability

import datetime
import ledger
import os
import sys

sys.path.append(os.path.dirname(__file__))
import common

s = common.Settings.load_or_defaults(os.path.expanduser("~/.ledgerhelpers.ini"))
journal = common.Journal.from_file(common.find_ledger_file(),
                                   common.find_ledger_price_file())
accts, commodities = journal.accounts_and_last_commodities()


if sys.argv[1:]:
    what = " ".join(sys.argv[1:])
else:
    what = common.prompt_for_expense("What did you buy?")
assert what, "Not a purchase: %s" % what


if "last_date" in s and s["last_date"] == None:
    del s["last_date"]
when = common.prompt_for_date(
    sys.stdin, sys.stdout,
    "When did you buy it?",
    s.get("last_date", datetime.date.today())
)
if when == datetime.date.today():
    del s["last_date"]
else:
    s["last_date"] = when

expense = common.prompt_for_account(
    sys.stdin, sys.stdout,
    accts, "What expense account?",
    s['suggester'].suggest(what)
)
assert expense, "Not an account: %s" % expense
s['suggester'].associate(what, expense)
s.persist()
expense_currency = commodities.get(expense, ledger.Amount("$ 1"))

amount = common.prompt_for_amount(
    sys.stdin, sys.stdout,
    "How much?", expense_currency
)

asset = common.prompt_for_account(
    sys.stdin, sys.stdout,
    accts, "Where did money come from?",
    s.get("last_asset_account", None)
)
assert asset, "Not an account: %s" % asset
s["last_asset_account"] = asset
expense_currency = commodities.get(asset, expense_currency)

lines = journal.generate_record(what, when, None, [
    (asset, [-1*amount]),
    (expense, [amount]),
])
print "========== Record =========="
print "\n".join(lines)
save = common.yesno(
    sys.stdin, sys.stderr,
    "Hit ENTER or y to save it to the file, BACKSPACE or n to skip saving: "
)
if save:
    journal.add_lines_to_file(lines)
