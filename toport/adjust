#!/usr/bin/env python

import datetime
import ledger
import os
import sys
sys.path.append(os.path.dirname(__file__))
import common


s = common.Settings.load_or_defaults(os.path.expanduser("~/.ledgerhelpers.ini"))
journal = common.Journal.from_file(common.find_ledger_file(),
                                   common.find_ledger_price_file())
accts, commodities = journal.accounts_and_last_commodities()

when = common.prompt_for_date(
    sys.stdin, sys.stdout,
    "When?",
    s.get("last_date", datetime.date.today())
)
if when == datetime.date.today():
    del s["last_date"]
else:
    s["last_date"] = when

asset1 = common.prompt_for_account(
    sys.stdin, sys.stdout,
    accts, "Account to adjust?",
    s.get("last_account_to_adjust", None)
)
assert asset1, "Not an account: %s" % asset1
s["last_account_to_adjust"] = asset1
try:
    amount1 = journal.balance_in_single_commodity(asset1)
except ArithmeticError, e:
    assert 0, "Account %s has a problem: %s" % (asset1, e)
print "Last known balance: %s" % amount1

asset2 = common.prompt_for_account(
    sys.stdin, sys.stdout,
    accts, "Adjustment account?",
    s.get("last_adjustment_account", None)
)
assert asset2, "Not an account: %s" % asset2
s["last_adjustment_account"] = asset2
asset2_currency = commodities.get(asset2, ledger.Amount("$ 1"))

amount2 = common.prompt_for_amount(
    sys.stdin, sys.stdout,
    "Current balance?", asset2_currency
)

lines = journal.generate_record("Adjustment", when, when, [
    (asset1, [-1*amount1, amount2]),
    (asset2, []),
])
print "========== Record =========="
print "\n".join(lines)
save = common.yesno(
    sys.stdin, sys.stderr,
    "Hit ENTER or y to save it to the file, BACKSPACE or n to skip saving: "
)
if save:
    journal.add_lines_to_file(lines)
